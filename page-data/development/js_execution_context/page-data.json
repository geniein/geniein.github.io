{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/js_execution_context/","result":{"data":{"site":{"siteMetadata":{"title":"Another day","author":"[geniein]","siteUrl":"https://geniein.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"0b9d8cb1-28cd-5555-b327-8e9765469500","excerpt":"실행 컨텍스트(Execution Context)란? Execution은 실행 Context는 문맥이라는 의미로 코드가 실행되는 환경(문맥)이라고 할수 있다. JS에는 코드가 실행될때 동일한 조건은  이렇게 4가지이다. 다시말해, 위 4가지 조건을 실행할 때 필요한 환경정보를 담은 객체라고 설명 할수 있다. 실행 컨텍스트는 전역 컨텍스트(Global Context)와 함수 컨텍스트(Function Context)…","html":"<h1 id=\"실행-컨텍스트execution-context란\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8execution-context%EB%9E%80\" aria-label=\"실행 컨텍스트execution context란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트(Execution Context)란?</h1>\n<p>Execution은 실행 Context는 문맥이라는 의미로 코드가 실행되는 환경(문맥)이라고 할수 있다.</p>\n<p>JS에는 코드가 실행될때 동일한 조건은 <code class=\"language-text\">전역공간, 함수, eval, 모듈</code> 이렇게 4가지이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//전역공간</span>\n<span class=\"token operator\">--</span>\n<span class=\"token operator\">-</span>  <span class=\"token keyword\">function</span> <span class=\"token function\">getSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//함수</span>\n<span class=\"token operator\">-</span>\n<span class=\"token operator\">-</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span>\n<span class=\"token operator\">-</span>  <span class=\"token keyword\">const</span> module <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//모듈</span>\n<span class=\"token operator\">-</span>\n<span class=\"token operator\">-</span>  <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'console.dir(this)'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// eval</span>\n<span class=\"token operator\">-</span>\n<span class=\"token operator\">--</span></code></pre></div>\n<p>다시말해, 위 4가지 조건을 실행할 때 필요한 환경정보를 담은 객체라고 설명 할수 있다.</p>\n<p>실행 컨텍스트는 전역 컨텍스트(Global Context)와 함수 컨텍스트(Function Context) 2가지로 나뉜다.</p>\n<p><code class=\"language-text\">전역 컨텍스트(Global Context)</code><br>\n자바스크립트가 처음 실행될때 생성되는 컨텍스트이며, 함수 컨텍스트를 제외한 전부라고 할수 있다.<br>\n<code class=\"language-text\">함수 컨텍스트(Function Context)</code><br>\n함수가 호출되는 시점에 생성되고 해당 함수의 동작이 종료되면 소멸된다.</p>\n<h2 id=\"실행-컨텍스트내부-구조\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"실행 컨텍스트내부 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트내부 구조</h2>\n<p><code class=\"language-text\">VariableEnvironment</code>,<code class=\"language-text\">LexicalEnvironment</code>,<code class=\"language-text\">ThisBinding</code>으로 3가지로 나뉜다.<br>\n<code class=\"language-text\">VariableEnvironment</code>,<code class=\"language-text\">LexicalEnvironment</code>에는 현재 환경과 관련된 식별자 정보들이 쌓이며 세부적으로 <code class=\"language-text\">VariableEnvironment</code>에는 식별자 정보가 담기며 변하지 않는 값들로 구성되고 <code class=\"language-text\">LexicalEnvironment</code>에는 각 식별자의 ‘데이터’ 추적하며 값들이 변할수 있다.</p>\n<p><code class=\"language-text\">LexicalEnvironment</code>에는 <code class=\"language-text\">environmentRecord</code>,<code class=\"language-text\">outerEnvironmentReference</code>로 구성되는데, <code class=\"language-text\">environmentRecord</code>에는 현재 문맥의 식별자 정보 이 과정을 <strong>호이스팅(Hoisting)</strong>이라고 부른다. <code class=\"language-text\">outerEnvironmentReference</code>는 현재 문맥에 관련 있는 <strong>외부</strong> 식별자 정보를 참조한다. 이렇게 계속 외부를 참조하는 연결이 <strong>스코프 체인(SCOPE CHAIN)</strong>이다.</p>\n<h3 id=\"실행-컨텍스트-예제\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%98%88%EC%A0%9C\" aria-label=\"실행 컨텍스트 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> first <span class=\"token operator\">=</span> <span class=\"token string\">'1st'</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//result : 1 , 1st , 1</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">inner</td>\n<td align=\"center\">VariableEnvironment<br/>---------------------------<br/>LexicalEnvironment<br/>---------------------------<br/>ThisBinding</td>\n<td align=\"center\">environmentRecord<br/>outerEnvironmentReference<br/>---------------------------------------<br/>environmentRecord<br/>outerEnvironmentReference<br/>---------------------------------------<br/> <br/></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">outer</td>\n<td align=\"center\">VariableEnvironment<br/>---------------------------<br/>LexicalEnvironment<br/>---------------------------<br/>ThisBinding</td>\n<td align=\"center\">environmentRecord<br/>outerEnvironmentReference<br/>---------------------------------------<br/>environmentRecord<br/>outerEnvironmentReference<br/>---------------------------------------<br/> <br/></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">전역 컨텍스트</td>\n<td align=\"center\">VariableEnvironment<br/>--------------------------<br/>LexicalEnvironment<br/>--------------------------<br/>ThisBinding</td>\n<td align=\"center\">environmentRecord<br/>----------------------------------<br/>environmentRecord<br/>----------------------------------<br/> window(web) 혹은 global(node)<br/></td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<p>예제의 실행컨텍스틑 위와 같은 그림을 그리고 있다.<br>\n실행컨텍스트를 단계별로 분석하며 위에서 부족한 설명을 보충해 보도록 하겠습니다.</p>\n<p>예제가 실행되면 먼저 호출스택(Call Stack)가장 밑에는 전역컨텍스트가 들어옵니다.\n이후 전역 컨텍스트의 VariableEnvironment인 first와 outer이 선언됩니다.(<strong>호이스팅</strong>)</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">전역 컨텍스트</th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">first 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">first 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">first 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">first 선언</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">outer 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">outer 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">outer 선언</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">first에 1 할당</td>\n<td align=\"center\"></td>\n<td align=\"center\">first에 1 할당</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">outer함수 호출</td>\n</tr>\n</tbody>\n</table>\n<p>outer함수가 호출되면 <code class=\"language-text\">함수 컨텍스트(Function Context)</code>가 생성된다.<br>\nouter함수에는 inner함수를 선언하고 <code class=\"language-text\">console.log(first)</code>실행 이때 first는 outer 컨텍스트 내부에 없기에 <code class=\"language-text\">outerEnvironmentReference</code>를 통해\n상위단(전역컨텍스트)에서 first변수를 찾아 있으면 출력 없으면 그 상위단으로 다시 이동하지만 전역 컨텍스트에는 <code class=\"language-text\">outerEnvironmentReference</code>가 없는 마지막이기에 여기에도 없으면 <code class=\"language-text\">undefined</code>가 나오게된다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">outer 컨텍스트</th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">inner 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">inner 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">inner 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">first 출력</td>\n<td align=\"center\"></td>\n<td align=\"center\">first 출력</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">inner 호출</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<p>inner함수가 호출되면 <code class=\"language-text\">함수 컨텍스트(Function Context)</code>가 생성된다.\ninner함수 내부에는 first가 있기에 <code class=\"language-text\">outerEnvironmentReference</code>통한 참조가 필요가 없어 first의 출력이 <strong>1st</strong>가 되게된다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">inner 컨텍스트</th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">first 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">first 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\">first 선언</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">first에 1st 할당</td>\n<td align=\"center\"></td>\n<td align=\"center\">first에 1st 할당</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">first 출력</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<p>마지막 라인에 있는 first는 자신의 <code class=\"language-text\">environmentRecord</code>에 선언된 first가 있기에 해당 값을 출력한다.\n또한 inner함수의 first출력후 inner함수의 Function Execution은 종료되어 없어졌기에 1st라는 값은 사라진 상태이다.</p>\n<p>이렇게 실행컨텍스트가 실행되고 <code class=\"language-text\">environmentRecord</code>에 식별자를 선언하는 것이 <strong>호이스팅(Hoisting)</strong>이며\n<code class=\"language-text\">outerEnvironmentReference</code>를 통해 <code class=\"language-text\">environmentRecord</code>없는 값을 찾아 상위 Scope에서 찾는 것이 <strong>스코프 체인(SCOPE CHAIN)</strong>이다.</p>","frontmatter":{"title":"Javascript의 실행 컨텍스트","date":"March 30, 2022"}}},"pageContext":{"slug":"/development/js_execution_context/","previous":{"fields":{"slug":"/development/js_datatype_memory/"},"frontmatter":{"title":"Javascript의 데이터 타입과 메모리"}},"next":{"fields":{"slug":"/development/js_callstack_eventloop/"},"frontmatter":{"title":"Javascript의 호출스택과 이벤트루프"}}}},"staticQueryHashes":["2486386679","3128451518"]}
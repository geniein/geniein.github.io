{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/js_this/","result":{"data":{"site":{"siteMetadata":{"title":"Another day","author":"[geniein]","siteUrl":"https://geniein.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5c07135a-82e8-5e3d-938d-0ea5c0d4302b","excerpt":"내가 처음으로 WEB개발을 시작할 시점에는 JS에서는 브라우저 위에서 간단하게 동작하는 수준이였기에 this까지 알 필요가 없었다. 하지만 React를 배우기 시작하면서\nClass문법을 사용함에따라 this라는 것을 계속 사용하게되고 이게 무엇인가를 이해하는데 굉장히 오랜시간이 걸렸었다. JS에서 this는 굉장히 중요한 개념이기에 꼭 이해하고 넘어가는 것을 권장한다. 이전  그림에 이라는 부분이 있었다. 는 함수가 호출될때 결정이된다. 하지만 에서의 는 Runtime…","html":"<p>내가 처음으로 WEB개발을 시작할 시점에는 JS에서는 브라우저 위에서 간단하게 동작하는 수준이였기에 this까지 알 필요가 없었다. 하지만 React를 배우기 시작하면서\nClass문법을 사용함에따라 this라는 것을 계속 사용하게되고 이게 무엇인가를 이해하는데 굉장히 오랜시간이 걸렸었다.<br>\nJS에서 this는 굉장히 중요한 개념이기에 꼭 이해하고 넘어가는 것을 권장한다.</p>\n<p>이전 <code class=\"language-text\">실행 컨텍스트</code> 그림에 <code class=\"language-text\">ThisBinding</code>이라는 부분이 있었다.<br>\n<code class=\"language-text\">this</code>는 함수가 호출될때 결정이된다. 하지만 <code class=\"language-text\">전역 컨텍스트</code>에서의 <code class=\"language-text\">this</code>는 Runtime환경에 따라 다르다.<br>\n대표적으로 브라우저인 웹에서의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">window객체</code>, 노드에서의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">Global객체</code>이다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">전역 컨텍스트</td>\n<td align=\"center\">VariableEnvironment<br/>--------------------------<br/>LexicalEnvironment<br/>--------------------------<br/>ThisBinding</td>\n<td align=\"center\">environmentRecord<br/>----------------------------------<br/>environmentRecord<br/>----------------------------------<br/> window(web) 혹은 global(node)<br/></td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<p>이외에는 상황마다 다르기에 <code class=\"language-text\">this</code>는 동적으로 Binding됩니다.\n동적으로 결정되는 상황은 <code class=\"language-text\">함수</code>, <code class=\"language-text\">메서드</code>, <code class=\"language-text\">콜백</code>, <code class=\"language-text\">생성자함수</code> 이렇게 4가지를 있고 차이점을 이해하면 된다.</p>\n<h3 id=\"함수-this\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-this\" aria-label=\"함수 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 this</h3>\n<p>함수안에서의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">실행컨텍스트</code>와 같이 window 혹은 global이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fisrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//result : window , window  --브라우저상</span></code></pre></div>\n<p>하지만 ES6부터 Arrow Function이 나오면서 이는 <code class=\"language-text\">this</code>를 binding하지 않게되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">first</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"메서드-this\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-this\" aria-label=\"메서드 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 this</h3>\n<p>메서드에서의 <code class=\"language-text\">this</code>는 메서드 호출한 주체를 가르킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">first</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nval<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//result : val</span></code></pre></div>\n<p>그렇다면 메서드 함수 안에 함수에서의 <code class=\"language-text\">this</code>는 무엇을 가르키는가?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">first</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nval<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//result : val , window</span></code></pre></div>\n<p>결과는 val.first가 아닌 window를 가르키고 있다. 이유는 바로 위에서 설명함 함수에서의 this는 window이기 때문이다.<br>\nES6이전 문법에는 이를 해결하기 위하여 다음과 같은 방법의 문법을 사용하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">first</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nval<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//result : val , val</span></code></pre></div>\n<p>ES6의 Arrow Function은 <code class=\"language-text\">this</code>를 binding하지 않기에 조금 더 효율적으로 코드를 만들수 있게되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">first</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">second</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nval<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//result : val , val</span></code></pre></div>\n<h2 id=\"명시적으로-this-를-바인딩하는-3가지-메서드-call-apply-bind\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-this-%EB%A5%BC-%EB%B0%94%EC%9D%B8%EB%94%A9%ED%95%98%EB%8A%94-3%EA%B0%80%EC%A7%80-%EB%A9%94%EC%84%9C%EB%93%9C-call-apply-bind\" aria-label=\"명시적으로 this 를 바인딩하는 3가지 메서드 call apply bind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적으로 this 를 바인딩하는 3가지 메서드 call, apply, bind</h2>\n<p>3가지의 메소드 중 call과 apply는 호출즉시 실행되고 bind 바인딩만 해준다는 차이점을 가지고 있다.<br>\ncall : <em>func.call(thisArg[, arg1[, arg2[, …]]])</em><br>\napply : <em>func.apply(thisArg, [argsArray])</em><br>\nbind : <em>func.bind(thisArg[, arg1[, arg2[, …]]])</em></p>\n<h3 id=\"콜백-this\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-this\" aria-label=\"콜백 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 this</h3>\n<p><code class=\"language-text\">Callback</code>의 <code class=\"language-text\">this</code>는 해당 함수의 처리방식에 따라 달라진다.\n예를들어 <code class=\"language-text\">함수 this</code>를 이용하여 callback을 했더라도 call, apply, bind와 같은 메소드로 인하여 window가 아닌 다른 객체를 가르키고 있을수 있다.\n대표적으로 setTimeout이나 addEventListener과 같은 예가 있다.</p>\n<h3 id=\"생성자-this\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-this\" aria-label=\"생성자 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 this</h3>\n<p>new를 이용하여 생성된 인스턴스를 가르킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> jin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jin'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>new라는 생성자를 통해 생성된 인스턴스의 <code class=\"language-text\">this</code>는 자신을 가르킨다.</p>","frontmatter":{"title":"Javascript의 this","date":"March 30, 2022"}}},"pageContext":{"slug":"/development/js_this/","previous":{"fields":{"slug":"/development/js_callstack_eventloop/"},"frontmatter":{"title":"Javascript의 호출스택과 이벤트루프"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}